/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/helpers/util.js":
/*!*****************************!*\
  !*** ./src/helpers/util.js ***!
  \*****************************/
/***/ (() => {

eval("/* global monthList, months */\n\nvar Util = function () {\n  //Formattering\n  var format = function () {\n    var formatDateForBackend = function (date) {\n      if (date === \"\") {\n        return \"\";\n      }\n      var fDate = new Date(date);\n      return fDate.getFullYear() + \"-\" + (fDate.getMonth() + 1) + \"-\" + fDate.getDate() + \" \" + fDate.getHours() + \":\" + fDate.getMinutes() + \":\" + fDate.getSeconds() + \"\";\n    };\n    var getDateFormat = function (from, to) {\n      let ret = [];\n      let fromDate = new Date(from.replace(\" \", \"T\"));\n      let toDate = new Date(to.replace(\" \", \"T\"));\n      //\t\t\tlet fromDate = new Date(from);\n      //\t\t\tlet toDate = new Date(to);\n\n      if (fromDate.getDate() === toDate.getDate()) {\n        ret.push(fromDate.getDate() + \". \");\n        let month = monthList[fromDate.getMonth()];\n        ret.push(months[month]);\n        return ret;\n      } else {\n        ret.push(fromDate.getDate() + \".-\" + toDate.getDate() + \".\");\n        let month = monthList[fromDate.getMonth()];\n        ret.push(months[month]);\n        return ret;\n      }\n    };\n    var getTimeFormat = function (from, to) {\n      let fromDate = new Date(from.replace(\" \", \"T\"));\n      let toDate = new Date(to.replace(\" \", \"T\"));\n      //\t\t\tlet fromDate = new Date(from);\n      //\t\t\tlet toDate = new Date(to);\n      let ret;\n      ret = (fromDate.getHours() < 10 ? '0' + fromDate.getHours() : fromDate.getHours()) + \":\" + (fromDate.getMinutes() < 10 ? '0' + fromDate.getMinutes() : fromDate.getMinutes()) + \" - \" + (toDate.getHours() < 10 ? '0' + toDate.getHours() : toDate.getHours()) + \":\" + (toDate.getMinutes() < 10 ? '0' + toDate.getMinutes() : toDate.getMinutes());\n      return ret;\n    };\n    return {\n      FormatDateForBackend: formatDateForBackend,\n      GetDateFormat: getDateFormat,\n      GetTimeFormat: getTimeFormat\n    };\n  }();\n  return {\n    Format: format\n  };\n}();\n$(document).ready(function () {\n  $(\"input[type=radio][name=select_template]\").change(function () {\n    var template = $(this).val();\n    var oArgs = {\n      menuaction: 'bookingfrontend.preferences.set'\n    };\n    var requestUrl = phpGWLink('bookingfrontend/', oArgs, true);\n    $.ajax({\n      type: 'POST',\n      dataType: 'json',\n      data: {\n        template_set: template\n      },\n      url: requestUrl,\n      success: function (data) {\n        //\t\tconsole.log(data);\n        location.reload(true);\n      }\n    });\n  });\n  $(\"input[type=radio][name=select_language]\").change(function () {\n    var lang = $(this).val();\n    var oArgs = {\n      menuaction: 'bookingfrontend.preferences.set'\n    };\n    var requestUrl = phpGWLink('bookingfrontend/', oArgs, true);\n    $.ajax({\n      type: 'POST',\n      dataType: 'json',\n      data: {\n        lang: lang\n      },\n      url: requestUrl,\n      success: function (data) {\n        location.reload(true);\n      }\n    });\n  });\n});\n\n//# sourceURL=webpack://bookingfrontend_2/./src/helpers/util.js?");

/***/ }),

/***/ "./src/pages/purchase_order_add.js":
/*!*****************************************!*\
  !*** ./src/pages/purchase_order_add.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helpers_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/util */ \"./src/helpers/util.js\");\n/* harmony import */ var _helpers_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_helpers_util__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/* global date_format, lang, initialSelection */\n\nko.bindingHandlers.collapse = {\n  init: function (element, valueAccessor) {\n    var value = valueAccessor();\n    $(element).collapse(ko.unwrap(value) ? 'show' : 'hide');\n  },\n  update: function (element, valueAccessor) {\n    var value = valueAccessor();\n    $(element).collapse(ko.unwrap(value) ? 'show' : 'hide');\n  }\n};\n\n/**\n * ArticleTableViewModel class to manage article table state and behavior.\n */\nclass ArticleTableViewModel {\n  /**\n   * Initializes a new instance of the ArticleTableViewModel class.\n   * @param {Object} params - The parameters passed to the component.\n   */\n  constructor(params) {\n    /** @type {Observable<Date[]>} */\n    this.dates = params.date;\n\n    /** @type {Observable<any[]>} */\n    this.selectedResources = params.selectedResources;\n\n    /** @type {ObservableArray<Object>} */\n    this.articles = ko.observableArray([]);\n\n    // Subscriptions to observables\n    this.dateSubscription = this.dates.subscribe(this.updateMandatoryQuantities.bind(this));\n    this.selectedResourcesSubscription = this.selectedResources.subscribe(this.handleResourceChange.bind(this));\n\n    // Initialize an observable to store the loading state\n    this.isLoading = ko.observable(false);\n\n    // Perform the data fetch\n    this.fetchArticles();\n  }\n\n  /**\n   * Handles changes in selected resources.\n   * @param {any} newValue - The new value of the selectedResources observable.\n   */\n  handleResourceChange(newValue) {\n    this.fetchArticles();\n  }\n  toggleCollapse(resource) {\n    resource.isCollapsed(!resource.isCollapsed());\n  }\n  getPriceUnit(resource) {\n    switch (resource.info.unit) {\n      case 'minute':\n        return \"Minuttpris\";\n      case 'hour':\n        return \"Timepris\";\n      case 'day':\n        return \"Dagspris\";\n      default:\n        // If the unit doesn't match minute, hour, or day, log an error or set a default\n        console.error('Unknown unit type for mandatory item:', resource.info.unit);\n        break;\n    }\n  }\n  getPriceName(resource) {\n    const plural = resource.info.selected_quantity() !== 1;\n    switch (resource.info.unit) {\n      case 'minute':\n        return \"Minutt\";\n      case 'hour':\n        return \"Timer\";\n      case 'day':\n        return \"Dager\";\n      default:\n        // If the unit doesn't match minute, hour, or day, log an error or set a default\n        console.error('Unknown unit type for mandatory item:', resource.info.unit);\n        break;\n    }\n  }\n\n  /**\n   * Increments the quantity for a given item.\n   * @param {Object} item - The item whose quantity is to be incremented.\n   */\n  incrementQuantity(item) {\n    // Increase the item's quantity by 1\n    item.selected_quantity(item.selected_quantity() + 1);\n  }\n\n  /**\n   * Decrements the quantity for a given item.\n   * @param {Object} item - The item whose quantity is to be decremented.\n   */\n  decrementQuantity(item) {\n    // Decrease the item's quantity by 1, but not below 0\n    const newQuantity = item.selected_quantity() - 1;\n    item.selected_quantity(newQuantity < 0 ? 0 : newQuantity);\n  }\n\n  /**\n   * Updates the quantities of mandatory items based on the date ranges.\n   * @param {Array} dates - An array of date ranges to calculate the total times.\n   */\n  updateMandatoryQuantities(dates) {\n    let totalMilliseconds = 0;\n    dates.forEach(dateRange => {\n      const from = luxon.DateTime.fromFormat(dateRange.from_, \"dd/MM/yyyy HH:mm\");\n      const to = luxon.DateTime.fromFormat(dateRange.to_, \"dd/MM/yyyy HH:mm\");\n\n      // Check if 'from' and 'to' are valid Luxon DateTime objects\n      if (from.isValid && to.isValid) {\n        totalMilliseconds += to - from; // Luxon DateTime objects can be subtracted directly\n      } else {\n        console.error('Invalid date range:', dateRange);\n        // Handle invalid dates appropriately\n      }\n    });\n    const totalMinutes = Math.floor(totalMilliseconds / 60000);\n    const totalHours = Math.floor(totalMinutes / 60);\n    const totalDays = Math.floor(totalHours / 24);\n\n    // Update quantities for mandatory items.\n    this.articles().forEach(resource => {\n      // Logic for updating mandatory items...\n      // See the previous implementation for details.\n      if (resource.info.mandatory) {\n        var quantity = 0;\n        switch (resource.info.unit) {\n          case 'minute':\n            quantity = totalMinutes;\n            break;\n          case 'hour':\n            quantity = totalHours;\n            break;\n          case 'day':\n            quantity = totalDays;\n            break;\n          default:\n            // If the unit doesn't match minute, hour, or day, log an error or set a default\n            console.error('Unknown unit type for mandatory item:', resource.info.unit);\n            quantity = 0; // Default quantity\n            break;\n        }\n        // Update the selected quantity observable for the resource\n        resource.info.selected_quantity(quantity);\n      }\n\n      // If the resource has groups with mandatory items, update those as well\n      Object.values(resource.groups).forEach(function (group) {\n        group.forEach(function (item) {\n          if (item.mandatory) {\n            var quantity = 0;\n            switch (item.unit) {\n              case 'minute':\n                quantity = totalMinutes;\n                break;\n              case 'hour':\n                quantity = totalHours;\n                break;\n              case 'day':\n                quantity = totalDays;\n                break;\n              default:\n                console.error('Unknown unit type for mandatory item:', item.unit);\n                quantity = 0; // Default quantity\n                break;\n            }\n            // Update the selected quantity observable for the item\n            item.selected_quantity(quantity);\n          }\n        });\n      });\n    });\n\n    // Optionally, log the total times.\n    // console.log(totalMinutes, totalHours, totalDays);\n  }\n\n  /**\n   * Calculates the total price for a given resource.\n   * @param {Object} resource - The resource for which to calculate the total price.\n   * @returns {string} The total price, formatted as a string with two decimal places.\n   */\n  calculateTotal(resource) {\n    // Start with the resource's base price times its quantity\n    var total = parseFloat(resource.info.price) * (resource.info.selected_quantity() || 0);\n\n    // Add the price of each subitem\n    Object.values(resource.groups).forEach(function (group) {\n      group.forEach(function (item) {\n        total += parseFloat(item.price) * (item.selected_quantity() || 0);\n      });\n    });\n    const hasDecimals = total % 1 !== 0;\n    const options = {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: hasDecimals ? 2 : 0\n    };\n    const formattedTotal = total.toLocaleString('nb-NO', options);\n    return hasDecimals ? formattedTotal : `${formattedTotal},-`;\n  }\n\n  /**\n   * Returns number in nb-NO locale.\n   * @param {number} value - input number.\n   * @param {number} fractions - numbers after decimal.\n   * @returns {string} Locale formatted number.\n   */\n  toLocale(value, fractions) {\n    if (typeof value === \"string\") {\n      value = +value;\n    }\n    const hasDecimals = value % 1 !== 0;\n    const options = {\n      minimumFractionDigits: hasDecimals ? fractions !== undefined ? fractions : 2 : 0\n    };\n    const formattedNumber = value.toLocaleString('nb-NO', options);\n    return hasDecimals ? formattedNumber : `${formattedNumber},-`;\n  }\n\n  /**\n   * Structures the raw table data into a more manageable format.\n   * @param {Array<Object>} items - The raw table data items.\n   * @returns {Object} The structured table data.\n   */\n  structureTableData(items) {\n    let resources = {};\n\n    // First, create entries for top-level resources\n    items.forEach(function (item) {\n      if (!item.parent_mapping_id) {\n        // item.selected_quantity = ko.observable(Math.max(item.selected_quantity || 0, 0));\n        resources[item.id] = {\n          info: item,\n          groups: {},\n          isCollapsed: ko.observable(false) // Add the isCollapsed observable here\n        };\n      }\n    });\n    // Then, assign children to their respective parents\n    items.forEach(function (item) {\n      item.name = item.name.replace(\"- \", \"\");\n      // Ensure selected_quantity is at least 0\n      item.selected_quantity = ko.observable(Math.max(item.selected_quantity || 0, 0));\n\n      // Add a computed observable for selected_sum\n      item.selected_sum = ko.pureComputed(function () {\n        return (item.selected_quantity() * parseFloat(item.price)).toFixed(2);\n      });\n      if (item.parent_mapping_id) {\n        // Check if the parent actually exists\n        if (resources[item.parent_mapping_id]) {\n          if (!resources[item.parent_mapping_id].groups[item.article_group_name]) {\n            resources[item.parent_mapping_id].groups[item.article_group_name] = [];\n          }\n          resources[item.parent_mapping_id].groups[item.article_group_name].push(item);\n        } else {\n          // Handle the case where the parent does not exist\n          console.error('Parent resource with ID ' + item.parent_mapping_id + ' does not exist.');\n          // You might want to handle this situation differently, depending on your needs.\n        }\n      }\n      // Add a computed observable for computedString\n      item.computed_selected_article = ko.pureComputed(function () {\n        const val = `${item.id}_${item.selected_quantity()}_x_x_${item.parent_mapping_id || 'null'}`;\n        return `${item.id}_${item.selected_quantity()}_x_x_${item.parent_mapping_id || 'null'}`;\n      });\n    });\n    return resources;\n  }\n  getRemark(itemArr) {\n    const itemWithRemark = itemArr.find(a => a.article_group_remark);\n    if (itemWithRemark) {\n      return `<br/> <span class=\"remark\">*${itemWithRemark.article_group_remark}</span>`;\n    }\n    return '';\n  }\n\n  /**\n   * Gets static JSON data for the articles.\n   * @returns {Object} The parsed JSON data.\n   */\n  getStaticTableData() {\n    return JSON.parse(`{\"data\":[{\"id\":700,\"parent_mapping_id\":null,\"resource_id\":482,\"article_id\":\"1_482\",\"name\":\"Anretning\",\"unit\":\"hour\",\"tax_code\":9,\"tax_percent\":25,\"group_id\":1,\"article_group_name\":\"Andre\",\"ex_tax_price\":\"136.99\",\"tax\":\"34.25\",\"price\":\"171.24\",\"unit_price\":\"0.00\",\"mandatory\":1,\"lang_unit\":\"Time\",\"selected_quantity\":1,\"selected_article_quantity\":\"700_1_9_136.99_\",\"selected_sum\":\"171.24\"},{\"id\":860,\"parent_mapping_id\":700,\"article_id\":\"2_3\",\"name\":\"- Gulrotkake\",\"unit\":\"kg\",\"tax_code\":9,\"tax_percent\":25,\"group_id\":2,\"article_group_name\":\"Kake\",\"ex_tax_price\":\"996.99\",\"tax\":\"249.25\",\"price\":\"1246.24\",\"unit_price\":\"0.00\",\"mandatory\":\"\",\"lang_unit\":\"Kg\",\"selected_quantity\":\"\",\"selected_article_quantity\":\"\",\"selected_sum\":\"\"},{\"id\":859,\"parent_mapping_id\":700,\"article_id\":\"2_2\",\"name\":\"- Utvask\",\"unit\":\"each\",\"tax_code\":9,\"tax_percent\":25,\"group_id\":1,\"article_group_name\":\"Andre\",\"ex_tax_price\":\"125.00\",\"tax\":\"31.25\",\"price\":\"156.25\",\"unit_price\":\"0.00\",\"mandatory\":\"\",\"lang_unit\":\"Stk\",\"selected_quantity\":\"\",\"selected_article_quantity\":\"\",\"selected_sum\":\"\"},{\"id\":129,\"parent_mapping_id\":null,\"resource_id\":106,\"article_id\":\"1_106\",\"name\":\"Småsalen\",\"unit\":\"hour\",\"tax_code\":9,\"tax_percent\":25,\"group_id\":1,\"article_group_name\":\"Andre\",\"ex_tax_price\":\"0.00\",\"tax\":\"0.00\",\"price\":\"0.00\",\"unit_price\":\"0.00\",\"mandatory\":1,\"lang_unit\":\"Time\",\"selected_quantity\":1,\"selected_article_quantity\":\"129_1_9_0.00_\",\"selected_sum\":\"0.00\"},{\"id\":860,\"parent_mapping_id\":129,\"article_id\":\"2_3\",\"name\":\"- Gulrotkake\",\"unit\":\"kg\",\"tax_code\":9,\"tax_percent\":25,\"group_id\":2,\"article_group_name\":\"Kake\",\"ex_tax_price\":\"996.99\",\"tax\":\"249.25\",\"price\":\"1246.24\",\"unit_price\":\"0.00\",\"mandatory\":\"\",\"lang_unit\":\"Kg\",\"selected_quantity\":\"\",\"selected_article_quantity\":\"\",\"selected_sum\":\"\"},{\"id\":859,\"parent_mapping_id\":129,\"article_id\":\"2_2\",\"name\":\"- Utvask\",\"unit\":\"each\",\"tax_code\":9,\"tax_percent\":25,\"group_id\":1,\"article_group_name\":\"Andre\",\"ex_tax_price\":\"125.00\",\"tax\":\"31.25\",\"price\":\"156.25\",\"unit_price\":\"0.00\",\"mandatory\":\"\",\"lang_unit\":\"Stk\",\"selected_quantity\":\"\",\"selected_article_quantity\":\"\",\"selected_sum\":\"\"}]}`);\n  }\n\n  /**\n   * Fetches article data from the server and updates the articles observable.\n   */\n  async fetchArticles() {\n    window.application_id = typeof window.application_id === 'undefined' ? '' : window.application_id;\n    window.reservation_type = typeof window.reservation_type === 'undefined' ? '' : window.reservation_type;\n    window.reservation_id = typeof window.reservation_id === 'undefined' ? '' : window.reservation_id;\n    const alloc_template_id = null;\n    const oArgs = {\n      menuaction: 'bookingfrontend.uiarticle_mapping.get_articles',\n      sort: 'name',\n      application_id: application_id,\n      reservation_type: reservation_type,\n      reservation_id: reservation_id,\n      alloc_template_id: alloc_template_id\n    };\n\n    // Generate the endpoint URL\n    let url = phpGWLink('bookingfrontend/', oArgs, true);\n\n    // Append each resource to the URL\n    for (const resource of this.selectedResources()) {\n      url += '&resources[]=' + resource;\n    }\n    // const structuredData = this.structureTableData(this.getStaticTableData()['data']);\n    // this.articles(Object.values(structuredData));\n    // return\n    this.isLoading(true); // Set loading state to true\n    try {\n      const response = await fetch(url); // Replace with your actual API endpoint\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = (await response.json())['data'];\n      const structuredData = this.structureTableData(data);\n      this.articles(Object.values(structuredData));\n    } catch (error) {\n      console.error('Fetching articles failed:', error);\n      // Handle the error state appropriately, perhaps by setting an error message observable\n    } finally {\n      this.updateMandatoryQuantities(this.dates());\n      this.isLoading(false); // Set loading state to false\n    }\n  }\n  cleanText(str) {\n    return str.replace(/<\\/?[^>]+(>|$)/g, \"\");\n  }\n\n  /**\n   * Disposes subscriptions to prevent memory leaks when the component is removed.\n   */\n  dispose() {\n    this.dateSubscription.dispose();\n    this.selectedResourcesSubscription.dispose();\n  }\n}\nko.components.register('article-table', {\n  viewModel: {\n    createViewModel: params => new ArticleTableViewModel(params)\n  },\n  // language=HTML\n  template: `\n        <!-- ko foreach: { data: articles, as: 'resource' } -->\n        <div class=\"article-table-wrapper\">\n            <div class=\"article-table-header\" data-bind=\"css: { 'collapsed-head': resource.isCollapsed() }\">\n                <!--                <div class=\"table article-table resource-table\" data-bind=\"css: { 'collapsed-head': resource.isCollapsed() }\">-->\n                <div class=\"resource-name\" data-bind=\"text: resource.info.name\"></div>\n                <div class=\"resource-price\"\n                     data-bind=\"text: $parent.getPriceUnit(resource)+': ' + $parent.toLocale(resource.info.price)\"></div>\n                <div class=\"resource-hours\"\n                     data-bind=\"text: $parent.getPriceName(resource)+': ' + resource.info.selected_quantity()\"></div>\n                <div class=\"resource-total\"\n                     data-bind=\"text: 'Total: ' + $parent.calculateTotal(resource)\"></div>\n                <div class=\"resource-expand\"\n                     data-bind=\"click: function() { $parent.toggleCollapse(resource) }\">\n                    <button class=\"btn btn-subtle\" type=\"button\" data-toggle=\"collapse\"\n                            data-bind=\"//click: function() { $parent.toggleCollapse(resource) }\"\n                            aria-expanded=\"true\">\n                        <!-- ko if: resource.isCollapsed() -->\n                        <div><i class=\"fas fa-angle-down\"></i></div>\n                        <!-- /ko -->\n                        <!-- ko ifnot: resource.isCollapsed() -->\n                        <div><i class=\"fas fa-angle-up\"></i></div>\n                        <!-- /ko -->\n                    </button>\n                </div>\n            </div>\n            <div style=\"display: none;\">\n                <td colspan=\"8\">\n                    <!-- Hidden inputs for resource -->\n                    <input type=\"hidden\" data-bind=\"value: resource.info.id\" name=\"resource_ids[]\">\n                    <input type=\"hidden\" data-bind=\"value: resource.info.selected_quantity\"\n                           name=\"resource_quantities[]\">\n                    <input type=\"hidden\" data-bind=\"value: resource.info.mandatory\" name=\"resource_mandatory[]\">\n                    <input type=\"hidden\" name=\"selected_articles[]\"\n                           data-bind=\"value: resource.info.computed_selected_article\">\n                    <!-- Add other hidden fields as needed -->\n                </td>\n            </div>\n            <div data-bind=\"visible: !resource.isCollapsed(), attr: {id: 'resource' + resource.info.resource_id}\"\n                 class=\"collapsible-part\">\n                <!-- ko foreach: { data: Object.keys(resource.groups), as: 'groupName' } -->\n                <div class=\"category-table \">\n                    <div class=\"category-header\">\n                        <div class=\"category-name\">\n                            <span class=\"category-name-title\" data-bind=\"text: groupName\"></span>\n                            <span data-bind=\"html: $parents[1].getRemark(resource.groups[groupName])\"></span>\n                        </div>\n                        <div class=\"category-header-description\">Beskrivelse</div>\n                        <div class=\"category-header-unit-price\">Pris pr enhet</div>\n                        <div class=\"category-header-count\">Antall enheter</div>\n                        <div class=\"category-header-total\">Total</div>\n                    </div>\n                    <div class=\"category-articles\">\n                        <!-- ko foreach: { data: resource.groups[groupName], as: 'item' } -->\n                        <div class=\"category-article-row\">\n                            <div class=\"item-name\" data-bind=\"text: item.name\"></div>\n                            <div class=\"desc-title\">Beskrivelse</div>\n\n                            <div class=\"item-description\"\n                                 data-bind=\"text: $parents[2].cleanText(item.article_remark)\"></div>\n                            <div class=\"price-title\">Pris pr enhet</div>\n\n                            <div class=\"item-price\"\n                                 data-bind=\"text: $parents[2].toLocale(item.price) + (item.unit === 'each' ? '/stk' : '/' + item.unit)\"></div>\n                            <!--                            <td class=\"item-quantity\">-->\n                            <!--                                <input type=\"number\" class=\"form-control\" min=\"0\"-->\n                            <!--                                       data-bind=\"value: item.selected_quantity, event: { change: $parent.updateQuantity }\">-->\n                            <!--                            </td>-->\n                            <div class=\"item-quantity\">\n                                <button type=\"button\" class=\" pe-btn pe-btn-secondary pe-btn--small-circle \"\n                                        data-bind=\"click: function(data, event) { $parents[2].decrementQuantity(item)  }\">\n                                    <svg viewBox=\"0 0 48 48\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" ml-update=\"aware\">\n                                        <path class=\"horizontal\" d=\"M32,26H16a2,2,0,0,1,0-4H32A2,2,0,0,1,32,26Z\"/>\n                                    </svg>\n                                </button>\n                                <span style=\"display: inline-block;min-width: 20px; text-align: center\"\n                                      data-bind=\"text: item.selected_quantity\"></span>\n                                <button type=\"button\" class=\" pe-btn pe-btn-secondary pe-btn--small-circle \"\n                                        data-bind=\"click: function() { $parents[2].incrementQuantity(item) }\">\n                                    <svg viewBox=\"0 0 48 48\"\n                                         xmlns=\"http://www.w3.org/2000/svg\" ml-update=\"aware\">\n                                        <path class=\"horizontal\" d=\"M32,26H16a2,2,0,0,1,0-4H32A2,2,0,0,1,32,26Z\"/>\n                                        <path class=\"vertical\"\n                                              d=\"M24,34a2,2,0,0,1-2-2V16a2,2,0,0,1,4,0V32A2,2,0,0,1,24,34Z\"\n                                        />\n                                    </svg>\n                                </button>\n                            </div>\n                            <div class=\"sum-title\">Total</div>\n                            <div class=\"item-sum\" data-bind=\"text: $parents[2].toLocale(item.selected_sum(), 2)\"></div>\n                            <div class=\"hidden-inputs\" style=\"display: none;\">\n                                <!-- Hidden inputs for each item -->\n                                <input type=\"hidden\" data-bind=\"value: item.id\">\n                                <input type=\"hidden\" data-bind=\"value: item.mandatory\" name=\"mandatory_items[]\">\n                                <input type=\"hidden\" data-bind=\"value: item.selected_quantity\"\n                                       name=\"selected_quantities[]\">\n                                <input type=\"hidden\" data-bind=\"value: item.parent_mapping_id\"\n                                       name=\"parent_mapping_ids[]\">\n                                <input type=\"text\" name=\"selected_articles[]\"\n                                       data-bind=\"value: item.computed_selected_article\">\n\n                            </div>\n                        </div>\n                        <!-- /ko -->\n                    </div>\n                </div>\n                <!-- /ko -->\n            </div>\n        </div>\n        <!-- /ko -->\n    `\n});\n\n//# sourceURL=webpack://bookingfrontend_2/./src/pages/purchase_order_add.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/pages/purchase_order_add.js");
/******/ 	
/******/ })()
;