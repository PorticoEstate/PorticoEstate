$accordion-active-colour: $blue;
$accordion-inactive-colour: $blue;

/* Style for the accordion button */
$bs-accordion-btn-icon-pe: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='#{$accordion-inactive-colour}' stroke-linecap='round' stroke-linejoin='round'><path d='M2 5L8 11L14 5'/></svg>") !default;
$bs-accordion-btn-active-icon: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='#{$accordion-active-colour}' stroke-linecap='round' stroke-linejoin='round'><path d='M2 5L8 11L14 5'/></svg>") !default;

// Characters which are escaped by the escape-svg function
$escaped-characters: (
                ("<", "%3c"),
                (">", "%3e"),
                ("#", "%23"),
                ("(", "%28"),
                (")", "%29"),
) !default;
// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, "url(") == 1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Kitty Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


.accordion {
  --bs-accordion-btn-padding-x: 0.5rem;
  --bs-accordion-btn-padding-y: 0.5rem;
  --bs-accordion-active-color: #{$accordion-active-colour};
  --bs-accordion-btn-icon-pe: #{escape-svg($bs-accordion-btn-icon-pe)};
  --bs-accordion-btn-active-icon: #{escape-svg($bs-accordion-btn-active-icon)};


  .accordion-item {

  }

  .accordion-button {
    @include applyFontProperties('label');

    &:not(.collapsed) {
      //color: var(--#{$prefix}accordion-active-color);
      //background-color: var(--#{$prefix}accordion-active-bg);
      //box-shadow: inset 0 calc(-1 * var(--#{$prefix}accordion-border-width)) 0 var(--#{$prefix}accordion-border-color); // stylelint-disable-line function-disallowed-list

      &::after {
        background-image: var(--bs-accordion-btn-active-icon);
        //transform: var(--#{$prefix}accordion-btn-icon-transform);
      }
    }

    // Accordion icon
    &::after {
      //flex-shrink: 0;
      //width: var(--#{$prefix}accordion-btn-icon-width);
      //height: var(--#{$prefix}accordion-btn-icon-width);
      //margin-left: auto;
      //content: "";
      background-image: var(--bs-accordion-btn-icon-pe);
      //background-repeat: no-repeat;
      //background-size: var(--#{$prefix}accordion-btn-icon-width);
      //@include transition(var(--#{$prefix}accordion-btn-icon-transition));
    }


    &.collapsed {
      color: $accordion-active-colour;
      background-color: transparent;
    }
  }
}
